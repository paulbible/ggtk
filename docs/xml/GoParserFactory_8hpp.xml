<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="GoParserFactory_8hpp" kind="file" language="C++">
    <compoundname>GoParserFactory.hpp</compoundname>
    <includes refid="GoParserInterface_8hpp" local="no">ggtk/GoParserInterface.hpp</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includedby refid="ggtk_8hpp" local="no">ggtk/ggtk.hpp</includedby>
    <incdepgraph>
      <node id="763">
        <label>boost/graph/breadth_first_search.hpp</label>
      </node>
      <node id="764">
        <label>boost/graph/connected_components.hpp</label>
      </node>
      <node id="757">
        <label>string</label>
      </node>
      <node id="766">
        <label>boost/graph/reverse_graph.hpp</label>
      </node>
      <node id="754">
        <label>ggtk/GoParserInterface.hpp</label>
        <link refid="GoParserInterface_8hpp_source"/>
        <childnode refid="755" relation="include">
        </childnode>
      </node>
      <node id="762">
        <label>boost/graph/graph_traits.hpp</label>
      </node>
      <node id="760">
        <label>boost/graph/subgraph.hpp</label>
      </node>
      <node id="761">
        <label>boost/graph/adjacency_iterator.hpp</label>
      </node>
      <node id="767">
        <label>vector</label>
      </node>
      <node id="758">
        <label>boost/unordered_set.hpp</label>
      </node>
      <node id="755">
        <label>ggtk/GoGraph.hpp</label>
        <link refid="GoGraph_8hpp_source"/>
        <childnode refid="756" relation="include">
        </childnode>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="762" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
      </node>
      <node id="756">
        <label>ggtk/GoEnums.hpp</label>
        <link refid="GoEnums_8hpp_source"/>
        <childnode refid="757" relation="include">
        </childnode>
      </node>
      <node id="759">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="753">
        <label>ggtk/GoParserFactory.hpp</label>
        <link refid="GoParserFactory.hpp"/>
        <childnode refid="754" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="757" relation="include">
        </childnode>
      </node>
      <node id="765">
        <label>boost/graph/strong_components.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="769">
        <label>ggtk/ggtk.hpp</label>
        <link refid="ggtk_8hpp_source"/>
      </node>
      <node id="768">
        <label>ggtk/GoParserFactory.hpp</label>
        <link refid="GoParserFactory.hpp"/>
        <childnode refid="769" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classGoParserFactory" prot="public">GoParserFactory</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*=============================================================================</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2016<sp/>Paul<sp/>W.<sp/>Bible</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight></codeline>
<codeline lineno="5"><highlight class="comment">file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight></codeline>
<codeline lineno="6"><highlight class="comment">==============================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GO_PARSER_FACTORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GO_PARSER_FACTORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ggtk/GoParserInterface.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="classGoParserFactory" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classGoParserFactory" kindref="compound">GoParserFactory</ref>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>_names;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;GoParserInterface*&gt;<sp/>_parsers;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"></codeline>
<codeline lineno="46" refid="classGoParserFactory_1ae6a6141ff3e9e10edb8bd94eed661e97" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classGoParserFactory_1ae6a6141ff3e9e10edb8bd94eed661e97" kindref="member">GoParserFactory</ref>(){</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//initialize<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_names<sp/><sp/><sp/>=<sp/>std::vector&lt;std::string&gt;();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_parsers<sp/>=<sp/>std::vector&lt;GoParserInterface*&gt;();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>Constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"></codeline>
<codeline lineno="57" refid="classGoParserFactory_1a690c83fe9183f8e49e19c46d7951d5ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classGoParserFactory_1a690c83fe9183f8e49e19c46d7951d5ce" kindref="member">~GoParserFactory</ref>(){</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//clear<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_names.clear();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//explicitly<sp/>delete<sp/>internal<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_parsers.size();++i){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>_parsers.at(i);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_parsers.clear();</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>destructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"></codeline>
<codeline lineno="75" refid="classGoParserFactory_1a93ca2a2c9ae05777d49e95793ce6dbdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGoParserFactory_1a93ca2a2c9ae05777d49e95793ce6dbdf" kindref="member">addParser</ref>(std::string<sp/>name,<ref refid="classGoParserInterface" kindref="compound">GoParserInterface</ref>*<sp/>parser){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_names.push_back(name);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_parsers.push_back(parser);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>method<sp/>addParser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"></codeline>
<codeline lineno="87" refid="classGoParserFactory_1a3f3b61ae2954943186646444417911cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classGoParserInterface" kindref="compound">GoParserInterface</ref>*<sp/><ref refid="classGoParserFactory_1a3f3b61ae2954943186646444417911cc" kindref="member">getParser</ref>(std::string<sp/>name){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//check<sp/>for<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_names.size();<sp/>++i){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_names.at(i).compare(name)<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_parsers.at(i)-&gt;<ref refid="classGoParserInterface_1a21c4ea01809737ab2975fb71edf6fcd5" kindref="member">clone</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>not<sp/>found<sp/>return<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight><highlight class="comment">//end<sp/>method<sp/>getParser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ggtk/GoParserFactory.hpp"/>
  </compounddef>
</doxygen>
