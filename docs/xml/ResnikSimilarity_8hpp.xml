<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="ResnikSimilarity_8hpp" kind="file" language="C++">
    <compoundname>ResnikSimilarity.hpp</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">string</includes>
    <includes refid="TermSimilarityInterface_8hpp" local="no">ggtk/TermSimilarityInterface.hpp</includes>
    <includes refid="TermInformationContentMap_8hpp" local="no">ggtk/TermInformationContentMap.hpp</includes>
    <includes refid="GoGraph_8hpp" local="no">ggtk/GoGraph.hpp</includes>
    <includes local="no">boost/unordered_set.hpp</includes>
    <includedby refid="ggtk_8hpp" local="no">ggtk/ggtk.hpp</includedby>
    <incdepgraph>
      <node id="1076">
        <label>boost/graph/breadth_first_search.hpp</label>
      </node>
      <node id="1077">
        <label>boost/graph/connected_components.hpp</label>
      </node>
      <node id="1086">
        <label>ggtk/TermProbabilityMap.hpp</label>
        <link refid="TermProbabilityMap_8hpp_source"/>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1096" relation="include">
        </childnode>
        <childnode refid="1079" relation="include">
        </childnode>
      </node>
      <node id="1065">
        <label>cmath</label>
      </node>
      <node id="1066">
        <label>string</label>
      </node>
      <node id="1079">
        <label>boost/graph/reverse_graph.hpp</label>
      </node>
      <node id="1084">
        <label>map</label>
      </node>
      <node id="1081">
        <label>fstream</label>
      </node>
      <node id="1075">
        <label>boost/graph/graph_traits.hpp</label>
      </node>
      <node id="1091">
        <label>boost/accumulators/statistics/min.hpp</label>
      </node>
      <node id="1092">
        <label>boost/accumulators/statistics/mean.hpp</label>
      </node>
      <node id="1064">
        <label>ggtk/ResnikSimilarity.hpp</label>
        <link refid="ResnikSimilarity.hpp"/>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1067" relation="include">
        </childnode>
        <childnode refid="1069" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1071" relation="include">
        </childnode>
      </node>
      <node id="1090">
        <label>boost/accumulators/statistics/max.hpp</label>
      </node>
      <node id="1073">
        <label>boost/graph/subgraph.hpp</label>
      </node>
      <node id="1080">
        <label>ggtk/AnnotationData.hpp</label>
        <link refid="AnnotationData_8hpp_source"/>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
        <childnode refid="1083" relation="include">
        </childnode>
        <childnode refid="1084" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1085" relation="include">
        </childnode>
        <childnode refid="1071" relation="include">
        </childnode>
      </node>
      <node id="1074">
        <label>boost/graph/adjacency_iterator.hpp</label>
      </node>
      <node id="1089">
        <label>boost/accumulators/statistics.hpp</label>
      </node>
      <node id="1085">
        <label>boost/unordered_map.hpp</label>
      </node>
      <node id="1082">
        <label>vector</label>
      </node>
      <node id="1088">
        <label>boost/accumulators/accumulators.hpp</label>
      </node>
      <node id="1094">
        <label>boost/accumulators/statistics/variance.hpp</label>
      </node>
      <node id="1071">
        <label>boost/unordered_set.hpp</label>
      </node>
      <node id="1093">
        <label>boost/accumulators/statistics/covariance.hpp</label>
      </node>
      <node id="1095">
        <label>boost/accumulators/statistics/variates/covariate.hpp</label>
      </node>
      <node id="1096">
        <label>boost/graph/depth_first_search.hpp</label>
      </node>
      <node id="1083">
        <label>iostream</label>
      </node>
      <node id="1087">
        <label>ggtk/Accumulators.hpp</label>
        <link refid="Accumulators_8hpp_source"/>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1089" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
      </node>
      <node id="1070">
        <label>ggtk/GoGraph.hpp</label>
        <link refid="GoGraph_8hpp_source"/>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1071" relation="include">
        </childnode>
        <childnode refid="1072" relation="include">
        </childnode>
        <childnode refid="1073" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
        <childnode refid="1075" relation="include">
        </childnode>
        <childnode refid="1076" relation="include">
        </childnode>
        <childnode refid="1077" relation="include">
        </childnode>
        <childnode refid="1078" relation="include">
        </childnode>
        <childnode refid="1079" relation="include">
        </childnode>
      </node>
      <node id="1068">
        <label>ggtk/GoEnums.hpp</label>
        <link refid="GoEnums_8hpp_source"/>
        <childnode refid="1066" relation="include">
        </childnode>
      </node>
      <node id="1072">
        <label>boost/graph/adjacency_list.hpp</label>
      </node>
      <node id="1069">
        <label>ggtk/TermInformationContentMap.hpp</label>
        <link refid="TermInformationContentMap_8hpp_source"/>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1086" relation="include">
        </childnode>
      </node>
      <node id="1078">
        <label>boost/graph/strong_components.hpp</label>
      </node>
      <node id="1067">
        <label>ggtk/TermSimilarityInterface.hpp</label>
        <link refid="TermSimilarityInterface_8hpp_source"/>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1098">
        <label>ggtk/ggtk.hpp</label>
        <link refid="ggtk_8hpp_source"/>
      </node>
      <node id="1097">
        <label>ggtk/ResnikSimilarity.hpp</label>
        <link refid="ResnikSimilarity.hpp"/>
        <childnode refid="1098" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classResnikSimilarity" prot="public">ResnikSimilarity</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>RESNIK_SIMILARITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RESNIK_SIMILARITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ggtk/TermSimilarityInterface.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ggtk/TermInformationContentMap.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ggtk/GoGraph.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/unordered_set.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classResnikSimilarity" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classResnikSimilarity" kindref="compound">ResnikSimilarity</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classTermSimilarityInterface" kindref="compound">TermSimilarityInterface</ref>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="33"></codeline>
<codeline lineno="36" refid="classResnikSimilarity_1a0e95354ebfc331dd4a73e823501378da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classResnikSimilarity_1a0e95354ebfc331dd4a73e823501378da" kindref="member">ResnikSimilarity</ref>(<ref refid="classGoGraph" kindref="compound">GoGraph</ref>*<sp/>goGraph,<ref refid="classTermInformationContentMap" kindref="compound">TermInformationContentMap</ref><sp/>&amp;icMap){</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_goGraph<sp/>=<sp/>goGraph;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_icMap<sp/>=<sp/>icMap;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"></codeline>
<codeline lineno="45" refid="classResnikSimilarity_1a340ace5dbdd105847d5fade4c8d20ade" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classResnikSimilarity_1a340ace5dbdd105847d5fade4c8d20ade" kindref="member">calculateTermSimilarity</ref>(std::string<sp/>goTermA,<sp/>std::string<sp/>goTermB){</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>terms<sp/>do<sp/>not<sp/>exit<sp/>return<sp/>0.0<sp/>similarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!_icMap.<ref refid="classTermProbabilityMap_1a14087f464ea33bf0247d6034e9ee2e9f" kindref="member">hasTerm</ref>(goTermA)<sp/>||<sp/>!_icMap.<ref refid="classTermProbabilityMap_1a14087f464ea33bf0247d6034e9ee2e9f" kindref="member">hasTerm</ref>(goTermB)){</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>not<sp/>from<sp/>same<sp/>ontology,<sp/>return<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_goGraph-&gt;<ref refid="classGoGraph_1a9f4f553098e14270f07e7791cfe65447" kindref="member">getTermOntology</ref>(goTermA)<sp/>!=<sp/>_goGraph-&gt;<ref refid="classGoGraph_1a9f4f553098e14270f07e7791cfe65447" kindref="member">getTermOntology</ref>(goTermB)){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//create<sp/>2<sp/>sets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::unordered_set&lt;std::string&gt;<sp/>ancestorsA<sp/>=<sp/>_goGraph-&gt;<ref refid="classGoGraph_1ae31e1546b740439d44860fa9543c83c2" kindref="member">getAncestorTerms</ref>(goTermA);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ancestorsA.insert(goTermA);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::unordered_set&lt;std::string&gt;<sp/>ancestorsB<sp/>=<sp/>_goGraph-&gt;<ref refid="classGoGraph_1ae31e1546b740439d44860fa9543c83c2" kindref="member">getAncestorTerms</ref>(goTermB);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ancestorsB.insert(goTermB);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>either<sp/>set<sp/>is<sp/>empty,<sp/>return<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ancestorsA.size()<sp/>==<sp/>0<sp/>||<sp/>ancestorsB.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>MICA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mica<sp/>=<sp/><ref refid="classResnikSimilarity_1ace3ae20bcef468c53925e45c647584c0" kindref="member">getMICA</ref>(ancestorsA,ancestorsB);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>the<sp/>inforamtion<sp/>content<sp/>of<sp/>the<sp/>mica</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_icMap[mica];</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"></codeline>
<codeline lineno="78" refid="classResnikSimilarity_1a4e1d6ef4268a905a117fd0c054e4c39b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classResnikSimilarity_1a4e1d6ef4268a905a117fd0c054e4c39b" kindref="member">calculateNormalizedTermSimilarity</ref>(std::string<sp/>goTermA,<sp/>std::string<sp/>goTermB){</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>the<sp/>terms<sp/>do<sp/>not<sp/>exit<sp/>return<sp/>0.0<sp/>similarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!_icMap.<ref refid="classTermProbabilityMap_1a14087f464ea33bf0247d6034e9ee2e9f" kindref="member">hasTerm</ref>(goTermA)<sp/>||<sp/>!_icMap.<ref refid="classTermProbabilityMap_1a14087f464ea33bf0247d6034e9ee2e9f" kindref="member">hasTerm</ref>(goTermB)){</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//call<sp/>base<sp/>similarity</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>resnik<sp/>=<sp/><ref refid="classResnikSimilarity_1a340ace5dbdd105847d5fade4c8d20ade" kindref="member">calculateTermSimilarity</ref>(goTermA,goTermB);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxIC;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//select<sp/>the<sp/>correct<sp/>ontology<sp/>normalization<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceGO_1a5ae335887b5cf40a9ef3045be9247fc3" kindref="member">GO::Onto</ref><sp/>ontoType<sp/>=<sp/>_goGraph-&gt;<ref refid="classGoGraph_1a9f4f553098e14270f07e7791cfe65447" kindref="member">getTermOntology</ref>(goTermA);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ontoType<sp/>==<sp/>GO::BP){</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxIC<sp/>=<sp/>-std::log(_icMap.<ref refid="classTermProbabilityMap_1aa0cbaada30cf4fe8f7bf55acdfcbe7aa" kindref="member">getMinBP</ref>());</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ontoType<sp/>==<sp/>GO::MF){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxIC<sp/>=<sp/>-std::log(_icMap.<ref refid="classTermProbabilityMap_1af23163c0122e7745b6581eda91a72809" kindref="member">getMinMF</ref>());</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>maxIC<sp/>=<sp/>-std::log(_icMap.<ref refid="classTermProbabilityMap_1aa74c8e413fa1cce4d6528ccfad32efad" kindref="member">getMinCC</ref>());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resnik/maxIC;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"></codeline>
<codeline lineno="106" refid="classResnikSimilarity_1ace3ae20bcef468c53925e45c647584c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classResnikSimilarity_1ace3ae20bcef468c53925e45c647584c0" kindref="member">getMICA</ref>(boost::unordered_set&lt;std::string&gt;<sp/>&amp;ancestorsA,boost::unordered_set&lt;std::string&gt;<sp/>&amp;ancestorsB){</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>first<sp/>term<sp/>as<sp/>a<sp/>start</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>mica<sp/>=<sp/>*ancestorsA.begin();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>-1.0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//always<sp/>traverse<sp/>the<sp/>shortest<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ancestorsA.size()<sp/>&gt;<sp/>ancestorsB.size()){</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ancestorsA.swap(ancestorsB);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//loop<sp/>over<sp/>shorter<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::unordered_set&lt;std::string&gt;::iterator<sp/>iter;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(iter<sp/>=<sp/>ancestorsA.begin();<sp/>iter<sp/>!=<sp/>ancestorsA.end();<sp/>++iter){</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//current<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>currentTerm<sp/>=<sp/>*iter;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(ancestorsB.find(currentTerm)<sp/>==<sp/>ancestorsB.end()){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//continue,<sp/>not<sp/>a<sp/>shared<sp/>ancestor<sp/>term</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>new<sp/>max,<sp/>update</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(_icMap[currentTerm]<sp/>&gt;<sp/>max){</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mica<sp/>=<sp/>currentTerm;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>_icMap[currentTerm];</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mica;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classGoGraph" kindref="compound">GoGraph</ref>*<sp/>_goGraph;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTermInformationContentMap" kindref="compound">TermInformationContentMap</ref><sp/>_icMap;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ggtk/ResnikSimilarity.hpp"/>
  </compounddef>
</doxygen>
