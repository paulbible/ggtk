<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="AllPairsAverageSetSimilarity_8hpp" kind="file" language="C++">
    <compoundname>AllPairsAverageSetSimilarity.hpp</compoundname>
    <includes refid="TermSetSimilarityInterface_8hpp" local="no">ggtk/TermSetSimilarityInterface.hpp</includes>
    <includes refid="TermSimilarityInterface_8hpp" local="no">ggtk/TermSimilarityInterface.hpp</includes>
    <includes refid="Accumulators_8hpp" local="no">ggtk/Accumulators.hpp</includes>
    <includedby refid="ggtk_8hpp" local="no">ggtk/ggtk.hpp</includedby>
    <incdepgraph>
      <node id="89">
        <label>ggtk/TermSetSimilarityInterface.hpp</label>
        <link refid="TermSetSimilarityInterface_8hpp_source"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="90">
        <label>string</label>
      </node>
      <node id="98">
        <label>boost/accumulators/statistics/min.hpp</label>
      </node>
      <node id="99">
        <label>boost/accumulators/statistics/mean.hpp</label>
      </node>
      <node id="97">
        <label>boost/accumulators/statistics/max.hpp</label>
      </node>
      <node id="96">
        <label>boost/accumulators/statistics.hpp</label>
      </node>
      <node id="95">
        <label>boost/accumulators/accumulators.hpp</label>
      </node>
      <node id="101">
        <label>boost/accumulators/statistics/variance.hpp</label>
      </node>
      <node id="91">
        <label>boost/unordered_set.hpp</label>
      </node>
      <node id="100">
        <label>boost/accumulators/statistics/covariance.hpp</label>
      </node>
      <node id="102">
        <label>boost/accumulators/statistics/variates/covariate.hpp</label>
      </node>
      <node id="94">
        <label>ggtk/Accumulators.hpp</label>
        <link refid="Accumulators_8hpp_source"/>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>ggtk/GoEnums.hpp</label>
        <link refid="GoEnums_8hpp_source"/>
        <childnode refid="90" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>ggtk/AllPairsAverageSetSimilarity.hpp</label>
        <link refid="AllPairsAverageSetSimilarity.hpp"/>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="92">
        <label>ggtk/TermSimilarityInterface.hpp</label>
        <link refid="TermSimilarityInterface_8hpp_source"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="104">
        <label>ggtk/ggtk.hpp</label>
        <link refid="ggtk_8hpp_source"/>
      </node>
      <node id="103">
        <label>ggtk/AllPairsAverageSetSimilarity.hpp</label>
        <link refid="AllPairsAverageSetSimilarity.hpp"/>
        <childnode refid="104" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classAllPairsAverageSetSimilarity" prot="public">AllPairsAverageSetSimilarity</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*=============================================================================</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2016<sp/>Paul<sp/>W.<sp/>Bible</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment">Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight></codeline>
<codeline lineno="5"><highlight class="comment">file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight></codeline>
<codeline lineno="6"><highlight class="comment">==============================================================================*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ALL_PAIRS_AVERAGE_SIMILARITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ALL_PAIRS_AVERAGE_SIMILARITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ggtk/TermSetSimilarityInterface.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ggtk/TermSimilarityInterface.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ggtk/Accumulators.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="classAllPairsAverageSetSimilarity" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classAllPairsAverageSetSimilarity" kindref="compound">AllPairsAverageSetSimilarity</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classTermSetSimilarityInterface" kindref="compound">TermSetSimilarityInterface</ref>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="28"></codeline>
<codeline lineno="31" refid="classAllPairsAverageSetSimilarity_1a67b7cfe7f078bea616baaf99116ace2e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classAllPairsAverageSetSimilarity_1a67b7cfe7f078bea616baaf99116ace2e" kindref="member">AllPairsAverageSetSimilarity</ref>(<ref refid="classTermSimilarityInterface" kindref="compound">TermSimilarityInterface</ref>*<sp/>simMeasure){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_similarity<sp/>=<sp/>simMeasure;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"></codeline>
<codeline lineno="39" refid="classAllPairsAverageSetSimilarity_1a685cd98d44c2e2ab9ee4fe7071066cde" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classAllPairsAverageSetSimilarity_1a685cd98d44c2e2ab9ee4fe7071066cde" kindref="member">calculateSimilarity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::unordered_set&lt;std::string&gt;<sp/>&amp;termsA,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::unordered_set&lt;std::string&gt;<sp/>&amp;termsB){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>0<sp/>if<sp/>a<sp/>set<sp/>is<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(termsA.size()<sp/>==<sp/>0<sp/>||<sp/>termsB.size()<sp/>==<sp/>0){</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>mean<sp/>accumulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceAccumulators_1a42d249e1cf4e4f6c496ab61b7372cf4a" kindref="member">Accumulators::MeanAccumulator</ref><sp/>simMean;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::unordered_set&lt;std::string&gt;::iterator<sp/>aTermIter;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::unordered_set&lt;std::string&gt;::iterator<sp/>bTermIter;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//iterate<sp/>A<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(aTermIter<sp/>=<sp/>termsA.begin();<sp/>aTermIter<sp/>!=<sp/>termsA.end();<sp/>++aTermIter){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>term<sp/>from<sp/>A<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>aTerm<sp/>=<sp/>*aTermIter;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//iterate<sp/>B<sp/>terms</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(bTermIter<sp/>=<sp/>termsB.begin();<sp/>bTermIter<sp/>!=<sp/>termsB.end();<sp/>++bTermIter){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//get<sp/>the<sp/>term<sp/>from<sp/>B<sp/>set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>bTerm<sp/>=<sp/>*bTermIter;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sim<sp/>=<sp/>_similarity-&gt;<ref refid="classTermSimilarityInterface_1aa46b7870c7725faab85ec502a3e5242d" kindref="member">calculateNormalizedTermSimilarity</ref>(aTerm,bTerm);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>aTerm<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>bTerm<sp/>&lt;&lt;<sp/>&quot;<sp/>&quot;<sp/>&lt;&lt;<sp/>sim<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>to<sp/>accumulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simMean(sim);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//return<sp/>the<sp/>mean<sp/>from<sp/>the<sp/>accumulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceAccumulators_1a42a703c5c61fedbdd8aecd2e558a4467" kindref="member">Accumulators::extractMean</ref>(simMean);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="72"></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classTermSimilarityInterface" kindref="compound">TermSimilarityInterface</ref>*<sp/>_similarity;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="ggtk/AllPairsAverageSetSimilarity.hpp"/>
  </compounddef>
</doxygen>
