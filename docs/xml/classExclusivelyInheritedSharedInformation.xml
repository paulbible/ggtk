<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classExclusivelyInheritedSharedInformation" kind="class" language="C++" prot="public">
    <compoundname>ExclusivelyInheritedSharedInformation</compoundname>
    <basecompoundref refid="classSharedInformationInterface" prot="public" virt="non-virtual">SharedInformationInterface</basecompoundref>
    <includes refid="ExclusivelyInheritedSharedInformation_8hpp" local="no">ggtk/ExclusivelyInheritedSharedInformation.hpp</includes>
    <innerclass refid="classExclusivelyInheritedSharedInformation_1_1EdgeSetVisitor" prot="private">ExclusivelyInheritedSharedInformation::EdgeSetVisitor</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classExclusivelyInheritedSharedInformation_1a35135778ed6c67466ef93acb1fe4bcf7" prot="private" static="no" mutable="no">
        <type><ref refid="classGoGraph" kindref="compound">GoGraph</ref> *</type>
        <definition>GoGraph* ExclusivelyInheritedSharedInformation::_goGraph</definition>
        <argsstring></argsstring>
        <name>_goGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="247" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classExclusivelyInheritedSharedInformation_1ae9a6f597d36bb0eecf79cc5526bfc044" prot="private" static="no" mutable="no">
        <type><ref refid="classTermInformationContentMap" kindref="compound">TermInformationContentMap</ref></type>
        <definition>TermInformationContentMap ExclusivelyInheritedSharedInformation::_icMap</definition>
        <argsstring></argsstring>
        <name>_icMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="248" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="248" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classExclusivelyInheritedSharedInformation_1a176bde96479ad6ea0baba4a520b7038e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>ExclusivelyInheritedSharedInformation::ExclusivelyInheritedSharedInformation</definition>
        <argsstring>(GoGraph *goGraph, TermInformationContentMap &amp;icMap)</argsstring>
        <name>ExclusivelyInheritedSharedInformation</name>
        <param>
          <type><ref refid="classGoGraph" kindref="compound">GoGraph</ref> *</type>
          <declname>goGraph</declname>
        </param>
        <param>
          <type><ref refid="classTermInformationContentMap" kindref="compound">TermInformationContentMap</ref> &amp;</type>
          <declname>icMap</declname>
        </param>
        <briefdescription>
<para>A constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Creates the <ref refid="classCoutoGraSMSharedInformation" kindref="compound">CoutoGraSMSharedInformation</ref> class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="37" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classExclusivelyInheritedSharedInformation_1a16a51c8f3bd02e6b1e88ebad6faffb5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::unordered_set&lt; std::string &gt;</type>
        <definition>boost::unordered_set&lt;std::string&gt; ExclusivelyInheritedSharedInformation::getCommonDisjointAncestors</definition>
        <argsstring>(const std::string &amp;termC1, const std::string &amp;termC2)</argsstring>
        <name>getCommonDisjointAncestors</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>termC1</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>termC2</declname>
        </param>
        <briefdescription>
<para>A method for determining the common disjunctive ancestors. </para>        </briefdescription>
        <detaileddescription>
<para>This method returns the common disjunctive ancestors for two terms </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="47" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="47" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classExclusivelyInheritedSharedInformation_1ae7e51e7f1328cfc5f7b9991c7714eadf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double ExclusivelyInheritedSharedInformation::sharedInformation</definition>
        <argsstring>(const std::string &amp;termA, const std::string &amp;termB)</argsstring>
        <name>sharedInformation</name>
        <reimplements refid="classSharedInformationInterface_1a76e8858eb598442b86b0fd3be1c519e7">sharedInformation</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>termA</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>termB</declname>
        </param>
        <briefdescription>
<para>An method for returning the shared information of two terms. </para>        </briefdescription>
        <detaileddescription>
<para>This method returns the mean information content of the frontier ancestors </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="136" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="136" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classExclusivelyInheritedSharedInformation_1ad77022f2d6225c423fa0c5abb8a1443a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double ExclusivelyInheritedSharedInformation::sharedInformation</definition>
        <argsstring>(const std::string &amp;term)</argsstring>
        <name>sharedInformation</name>
        <reimplements refid="classSharedInformationInterface_1aba102c0e44fbc098baef6074f1eb37b6">sharedInformation</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>An interface method for returning the shared information of a single terms,or information content. </para>        </briefdescription>
        <detaileddescription>
<para>This method privdes a mechanism for returing a term&apos;s infromation content. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="163" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="163" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classExclusivelyInheritedSharedInformation_1af435c2641f3ab4a34db2d473216ceb16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>double</type>
        <definition>double ExclusivelyInheritedSharedInformation::maxInformationContent</definition>
        <argsstring>(const std::string &amp;term)</argsstring>
        <name>maxInformationContent</name>
        <reimplements refid="classSharedInformationInterface_1a7356ba99509458777972ce0f00ebd999">maxInformationContent</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>An interface method for returning the maximum information content for a term. </para>        </briefdescription>
        <detaileddescription>
<para>This method provides the absolute max information content within a corpus for normalization purposes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="176" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="176" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classExclusivelyInheritedSharedInformation_1a0bf2231c6f714d97a5e55ee67893e403" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool ExclusivelyInheritedSharedInformation::hasTerm</definition>
        <argsstring>(const std::string &amp;term)</argsstring>
        <name>hasTerm</name>
        <reimplements refid="classSharedInformationInterface_1a3f056cf6a40eea8c1669108087dcd5c8">hasTerm</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>An interface method for determining if a term can be found. </para>        </briefdescription>
        <detaileddescription>
<para>Determines if the term can be found in the current map. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="197" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="197" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classExclusivelyInheritedSharedInformation_1a7b0ec1a7a1fb653450686c7e31346363" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool ExclusivelyInheritedSharedInformation::isSameOntology</definition>
        <argsstring>(const std::string &amp;termA, const std::string &amp;termB)</argsstring>
        <name>isSameOntology</name>
        <reimplements refid="classSharedInformationInterface_1a607463b9736df9c4b8ec3ba9fe41c19d">isSameOntology</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>termA</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>termB</declname>
        </param>
        <briefdescription>
<para>An interface method for determining if the two terms are of like ontologies. </para>        </briefdescription>
        <detaileddescription>
<para>Determine if two terms are of the same ontology. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="205" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="205" bodyend="207"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class to calculate shared infromation in linear time after Zhang and Lai. </para>    </briefdescription>
    <detaileddescription>
<para>Shu-Bo Zhang and Jian-Huang Lai. Semantic Similarity measurement between gene ontology terms based on exclusively inherited shared informaiton. Gene 558 (2015) 108-117. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="80">
        <label>ExclusivelyInheritedSharedInformation</label>
        <link refid="classExclusivelyInheritedSharedInformation"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>SharedInformationInterface</label>
        <link refid="classSharedInformationInterface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="82">
        <label>ExclusivelyInheritedSharedInformation</label>
        <link refid="classExclusivelyInheritedSharedInformation"/>
        <childnode refid="83" relation="public-inheritance">
        </childnode>
      </node>
      <node id="83">
        <label>SharedInformationInterface</label>
        <link refid="classSharedInformationInterface"/>
      </node>
    </collaborationgraph>
    <location file="ggtk/ExclusivelyInheritedSharedInformation.hpp" line="29" column="1" bodyfile="ggtk/ExclusivelyInheritedSharedInformation.hpp" bodystart="29" bodyend="251"/>
    <listofallmembers>
      <member refid="classExclusivelyInheritedSharedInformation_1a35135778ed6c67466ef93acb1fe4bcf7" prot="private" virt="non-virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>_goGraph</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1ae9a6f597d36bb0eecf79cc5526bfc044" prot="private" virt="non-virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>_icMap</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1a176bde96479ad6ea0baba4a520b7038e" prot="public" virt="non-virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>ExclusivelyInheritedSharedInformation</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1a16a51c8f3bd02e6b1e88ebad6faffb5d" prot="public" virt="non-virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>getCommonDisjointAncestors</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1a0bf2231c6f714d97a5e55ee67893e403" prot="public" virt="virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>hasTerm</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1a7b0ec1a7a1fb653450686c7e31346363" prot="public" virt="virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>isSameOntology</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1af435c2641f3ab4a34db2d473216ceb16" prot="public" virt="virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>maxInformationContent</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1ae7e51e7f1328cfc5f7b9991c7714eadf" prot="public" virt="virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>sharedInformation</name></member>
      <member refid="classExclusivelyInheritedSharedInformation_1ad77022f2d6225c423fa0c5abb8a1443a" prot="public" virt="virtual"><scope>ExclusivelyInheritedSharedInformation</scope><name>sharedInformation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
