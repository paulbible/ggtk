# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_go_enums', [dirname(__file__)])
        except ImportError:
            import _go_enums
            return _go_enums
        if fp is not None:
            try:
                _mod = imp.load_module('_go_enums', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _go_enums = swig_import_helper()
    del swig_import_helper
else:
    import _go_enums
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _go_enums.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _go_enums.SwigPyIterator_value(self)
    def incr(self, n = 1): return _go_enums.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _go_enums.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _go_enums.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _go_enums.SwigPyIterator_equal(self, *args)
    def copy(self): return _go_enums.SwigPyIterator_copy(self)
    def next(self): return _go_enums.SwigPyIterator_next(self)
    def __next__(self): return _go_enums.SwigPyIterator___next__(self)
    def previous(self): return _go_enums.SwigPyIterator_previous(self)
    def advance(self, *args): return _go_enums.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _go_enums.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _go_enums.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _go_enums.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _go_enums.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _go_enums.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _go_enums.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _go_enums.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SizeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _go_enums.SizeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _go_enums.SizeVector___nonzero__(self)
    def __bool__(self): return _go_enums.SizeVector___bool__(self)
    def __len__(self): return _go_enums.SizeVector___len__(self)
    def pop(self): return _go_enums.SizeVector_pop(self)
    def __getslice__(self, *args): return _go_enums.SizeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _go_enums.SizeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _go_enums.SizeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _go_enums.SizeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _go_enums.SizeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _go_enums.SizeVector___setitem__(self, *args)
    def append(self, *args): return _go_enums.SizeVector_append(self, *args)
    def empty(self): return _go_enums.SizeVector_empty(self)
    def size(self): return _go_enums.SizeVector_size(self)
    def clear(self): return _go_enums.SizeVector_clear(self)
    def swap(self, *args): return _go_enums.SizeVector_swap(self, *args)
    def get_allocator(self): return _go_enums.SizeVector_get_allocator(self)
    def begin(self): return _go_enums.SizeVector_begin(self)
    def end(self): return _go_enums.SizeVector_end(self)
    def rbegin(self): return _go_enums.SizeVector_rbegin(self)
    def rend(self): return _go_enums.SizeVector_rend(self)
    def pop_back(self): return _go_enums.SizeVector_pop_back(self)
    def erase(self, *args): return _go_enums.SizeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _go_enums.new_SizeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _go_enums.SizeVector_push_back(self, *args)
    def front(self): return _go_enums.SizeVector_front(self)
    def back(self): return _go_enums.SizeVector_back(self)
    def assign(self, *args): return _go_enums.SizeVector_assign(self, *args)
    def resize(self, *args): return _go_enums.SizeVector_resize(self, *args)
    def insert(self, *args): return _go_enums.SizeVector_insert(self, *args)
    def reserve(self, *args): return _go_enums.SizeVector_reserve(self, *args)
    def capacity(self): return _go_enums.SizeVector_capacity(self)
    __swig_destroy__ = _go_enums.delete_SizeVector
    __del__ = lambda self : None;
SizeVector_swigregister = _go_enums.SizeVector_swigregister
SizeVector_swigregister(SizeVector)

class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _go_enums.new_StringArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _go_enums.delete_StringArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _go_enums.StringArray___getitem__(self, *args)
    def __setitem__(self, *args): return _go_enums.StringArray___setitem__(self, *args)
    def cast(self): return _go_enums.StringArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _go_enums.StringArray_frompointer
    if _newclass:frompointer = staticmethod(_go_enums.StringArray_frompointer)
StringArray_swigregister = _go_enums.StringArray_swigregister
StringArray_swigregister(StringArray)

def StringArray_frompointer(*args):
  return _go_enums.StringArray_frompointer(*args)
StringArray_frompointer = _go_enums.StringArray_frompointer

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _go_enums.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _go_enums.StringVector___nonzero__(self)
    def __bool__(self): return _go_enums.StringVector___bool__(self)
    def __len__(self): return _go_enums.StringVector___len__(self)
    def pop(self): return _go_enums.StringVector_pop(self)
    def __getslice__(self, *args): return _go_enums.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _go_enums.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _go_enums.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _go_enums.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _go_enums.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _go_enums.StringVector___setitem__(self, *args)
    def append(self, *args): return _go_enums.StringVector_append(self, *args)
    def empty(self): return _go_enums.StringVector_empty(self)
    def size(self): return _go_enums.StringVector_size(self)
    def clear(self): return _go_enums.StringVector_clear(self)
    def swap(self, *args): return _go_enums.StringVector_swap(self, *args)
    def get_allocator(self): return _go_enums.StringVector_get_allocator(self)
    def begin(self): return _go_enums.StringVector_begin(self)
    def end(self): return _go_enums.StringVector_end(self)
    def rbegin(self): return _go_enums.StringVector_rbegin(self)
    def rend(self): return _go_enums.StringVector_rend(self)
    def pop_back(self): return _go_enums.StringVector_pop_back(self)
    def erase(self, *args): return _go_enums.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _go_enums.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _go_enums.StringVector_push_back(self, *args)
    def front(self): return _go_enums.StringVector_front(self)
    def back(self): return _go_enums.StringVector_back(self)
    def assign(self, *args): return _go_enums.StringVector_assign(self, *args)
    def resize(self, *args): return _go_enums.StringVector_resize(self, *args)
    def insert(self, *args): return _go_enums.StringVector_insert(self, *args)
    def reserve(self, *args): return _go_enums.StringVector_reserve(self, *args)
    def capacity(self): return _go_enums.StringVector_capacity(self)
    __swig_destroy__ = _go_enums.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _go_enums.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _go_enums.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _go_enums.DoubleVector___nonzero__(self)
    def __bool__(self): return _go_enums.DoubleVector___bool__(self)
    def __len__(self): return _go_enums.DoubleVector___len__(self)
    def pop(self): return _go_enums.DoubleVector_pop(self)
    def __getslice__(self, *args): return _go_enums.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _go_enums.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _go_enums.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _go_enums.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _go_enums.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _go_enums.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _go_enums.DoubleVector_append(self, *args)
    def empty(self): return _go_enums.DoubleVector_empty(self)
    def size(self): return _go_enums.DoubleVector_size(self)
    def clear(self): return _go_enums.DoubleVector_clear(self)
    def swap(self, *args): return _go_enums.DoubleVector_swap(self, *args)
    def get_allocator(self): return _go_enums.DoubleVector_get_allocator(self)
    def begin(self): return _go_enums.DoubleVector_begin(self)
    def end(self): return _go_enums.DoubleVector_end(self)
    def rbegin(self): return _go_enums.DoubleVector_rbegin(self)
    def rend(self): return _go_enums.DoubleVector_rend(self)
    def pop_back(self): return _go_enums.DoubleVector_pop_back(self)
    def erase(self, *args): return _go_enums.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _go_enums.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _go_enums.DoubleVector_push_back(self, *args)
    def front(self): return _go_enums.DoubleVector_front(self)
    def back(self): return _go_enums.DoubleVector_back(self)
    def assign(self, *args): return _go_enums.DoubleVector_assign(self, *args)
    def resize(self, *args): return _go_enums.DoubleVector_resize(self, *args)
    def insert(self, *args): return _go_enums.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _go_enums.DoubleVector_reserve(self, *args)
    def capacity(self): return _go_enums.DoubleVector_capacity(self)
    __swig_destroy__ = _go_enums.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _go_enums.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

NUM_ONTOLOGIES = _go_enums.NUM_ONTOLOGIES
NUM_EVIDENCES = _go_enums.NUM_EVIDENCES
NUM_RELATIONSHIPS = _go_enums.NUM_RELATIONSHIPS

def getRootTermBP():
  return _go_enums.getRootTermBP()
getRootTermBP = _go_enums.getRootTermBP

def getRootTermMF():
  return _go_enums.getRootTermMF()
getRootTermMF = _go_enums.getRootTermMF

def getRootTermCC():
  return _go_enums.getRootTermCC()
getRootTermCC = _go_enums.getRootTermCC
BP = _go_enums.BP
MF = _go_enums.MF
CC = _go_enums.CC
ONTO_ERROR = _go_enums.ONTO_ERROR

def ontologyStringToCode(*args):
  return _go_enums.ontologyStringToCode(*args)
ontologyStringToCode = _go_enums.ontologyStringToCode

def ontologyToString(*args):
  return _go_enums.ontologyToString(*args)
ontologyToString = _go_enums.ontologyToString
EXP = _go_enums.EXP
IDA = _go_enums.IDA
IPI = _go_enums.IPI
IMP = _go_enums.IMP
IGI = _go_enums.IGI
IEP = _go_enums.IEP
ISS = _go_enums.ISS
ISO = _go_enums.ISO
ISA = _go_enums.ISA
ISM = _go_enums.ISM
IGC = _go_enums.IGC
IBA = _go_enums.IBA
IBD = _go_enums.IBD
IKR = _go_enums.IKR
IRD = _go_enums.IRD
RCA = _go_enums.RCA
TAS = _go_enums.TAS
NAS = _go_enums.NAS
IC = _go_enums.IC
ND = _go_enums.ND
IEA = _go_enums.IEA
NR = _go_enums.NR
ECODE_ERROR = _go_enums.ECODE_ERROR

def evidenceStringToCode(*args):
  return _go_enums.evidenceStringToCode(*args)
evidenceStringToCode = _go_enums.evidenceStringToCode

def evidenceToString(*args):
  return _go_enums.evidenceToString(*args)
evidenceToString = _go_enums.evidenceToString
IS_A = _go_enums.IS_A
PART_OF = _go_enums.PART_OF
REGULATES = _go_enums.REGULATES
POSITIVELY_REGULATES = _go_enums.POSITIVELY_REGULATES
NEGATIVELY_REGULATES = _go_enums.NEGATIVELY_REGULATES
REL_ERROR = _go_enums.REL_ERROR

def relationshipStringToCode(*args):
  return _go_enums.relationshipStringToCode(*args)
relationshipStringToCode = _go_enums.relationshipStringToCode

def relationshipToString(*args):
  return _go_enums.relationshipToString(*args)
relationshipToString = _go_enums.relationshipToString

cvar = _go_enums.cvar

