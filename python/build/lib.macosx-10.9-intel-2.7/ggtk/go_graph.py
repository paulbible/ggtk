# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_go_graph', [dirname(__file__)])
        except ImportError:
            import _go_graph
            return _go_graph
        if fp is not None:
            try:
                _mod = imp.load_module('_go_graph', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _go_graph = swig_import_helper()
    del swig_import_helper
else:
    import _go_graph
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _go_graph.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _go_graph.SwigPyIterator_value(self)
    def incr(self, n = 1): return _go_graph.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _go_graph.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _go_graph.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _go_graph.SwigPyIterator_equal(self, *args)
    def copy(self): return _go_graph.SwigPyIterator_copy(self)
    def next(self): return _go_graph.SwigPyIterator_next(self)
    def __next__(self): return _go_graph.SwigPyIterator___next__(self)
    def previous(self): return _go_graph.SwigPyIterator_previous(self)
    def advance(self, *args): return _go_graph.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _go_graph.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _go_graph.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _go_graph.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _go_graph.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _go_graph.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _go_graph.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _go_graph.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SizeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _go_graph.SizeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _go_graph.SizeVector___nonzero__(self)
    def __bool__(self): return _go_graph.SizeVector___bool__(self)
    def __len__(self): return _go_graph.SizeVector___len__(self)
    def pop(self): return _go_graph.SizeVector_pop(self)
    def __getslice__(self, *args): return _go_graph.SizeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _go_graph.SizeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _go_graph.SizeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _go_graph.SizeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _go_graph.SizeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _go_graph.SizeVector___setitem__(self, *args)
    def append(self, *args): return _go_graph.SizeVector_append(self, *args)
    def empty(self): return _go_graph.SizeVector_empty(self)
    def size(self): return _go_graph.SizeVector_size(self)
    def clear(self): return _go_graph.SizeVector_clear(self)
    def swap(self, *args): return _go_graph.SizeVector_swap(self, *args)
    def get_allocator(self): return _go_graph.SizeVector_get_allocator(self)
    def begin(self): return _go_graph.SizeVector_begin(self)
    def end(self): return _go_graph.SizeVector_end(self)
    def rbegin(self): return _go_graph.SizeVector_rbegin(self)
    def rend(self): return _go_graph.SizeVector_rend(self)
    def pop_back(self): return _go_graph.SizeVector_pop_back(self)
    def erase(self, *args): return _go_graph.SizeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _go_graph.new_SizeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _go_graph.SizeVector_push_back(self, *args)
    def front(self): return _go_graph.SizeVector_front(self)
    def back(self): return _go_graph.SizeVector_back(self)
    def assign(self, *args): return _go_graph.SizeVector_assign(self, *args)
    def resize(self, *args): return _go_graph.SizeVector_resize(self, *args)
    def insert(self, *args): return _go_graph.SizeVector_insert(self, *args)
    def reserve(self, *args): return _go_graph.SizeVector_reserve(self, *args)
    def capacity(self): return _go_graph.SizeVector_capacity(self)
    __swig_destroy__ = _go_graph.delete_SizeVector
    __del__ = lambda self : None;
SizeVector_swigregister = _go_graph.SizeVector_swigregister
SizeVector_swigregister(SizeVector)

class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _go_graph.new_StringArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _go_graph.delete_StringArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _go_graph.StringArray___getitem__(self, *args)
    def __setitem__(self, *args): return _go_graph.StringArray___setitem__(self, *args)
    def cast(self): return _go_graph.StringArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _go_graph.StringArray_frompointer
    if _newclass:frompointer = staticmethod(_go_graph.StringArray_frompointer)
StringArray_swigregister = _go_graph.StringArray_swigregister
StringArray_swigregister(StringArray)

def StringArray_frompointer(*args):
  return _go_graph.StringArray_frompointer(*args)
StringArray_frompointer = _go_graph.StringArray_frompointer

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _go_graph.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _go_graph.StringVector___nonzero__(self)
    def __bool__(self): return _go_graph.StringVector___bool__(self)
    def __len__(self): return _go_graph.StringVector___len__(self)
    def pop(self): return _go_graph.StringVector_pop(self)
    def __getslice__(self, *args): return _go_graph.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _go_graph.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _go_graph.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _go_graph.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _go_graph.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _go_graph.StringVector___setitem__(self, *args)
    def append(self, *args): return _go_graph.StringVector_append(self, *args)
    def empty(self): return _go_graph.StringVector_empty(self)
    def size(self): return _go_graph.StringVector_size(self)
    def clear(self): return _go_graph.StringVector_clear(self)
    def swap(self, *args): return _go_graph.StringVector_swap(self, *args)
    def get_allocator(self): return _go_graph.StringVector_get_allocator(self)
    def begin(self): return _go_graph.StringVector_begin(self)
    def end(self): return _go_graph.StringVector_end(self)
    def rbegin(self): return _go_graph.StringVector_rbegin(self)
    def rend(self): return _go_graph.StringVector_rend(self)
    def pop_back(self): return _go_graph.StringVector_pop_back(self)
    def erase(self, *args): return _go_graph.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _go_graph.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _go_graph.StringVector_push_back(self, *args)
    def front(self): return _go_graph.StringVector_front(self)
    def back(self): return _go_graph.StringVector_back(self)
    def assign(self, *args): return _go_graph.StringVector_assign(self, *args)
    def resize(self, *args): return _go_graph.StringVector_resize(self, *args)
    def insert(self, *args): return _go_graph.StringVector_insert(self, *args)
    def reserve(self, *args): return _go_graph.StringVector_reserve(self, *args)
    def capacity(self): return _go_graph.StringVector_capacity(self)
    __swig_destroy__ = _go_graph.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _go_graph.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _go_graph.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _go_graph.DoubleVector___nonzero__(self)
    def __bool__(self): return _go_graph.DoubleVector___bool__(self)
    def __len__(self): return _go_graph.DoubleVector___len__(self)
    def pop(self): return _go_graph.DoubleVector_pop(self)
    def __getslice__(self, *args): return _go_graph.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _go_graph.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _go_graph.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _go_graph.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _go_graph.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _go_graph.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _go_graph.DoubleVector_append(self, *args)
    def empty(self): return _go_graph.DoubleVector_empty(self)
    def size(self): return _go_graph.DoubleVector_size(self)
    def clear(self): return _go_graph.DoubleVector_clear(self)
    def swap(self, *args): return _go_graph.DoubleVector_swap(self, *args)
    def get_allocator(self): return _go_graph.DoubleVector_get_allocator(self)
    def begin(self): return _go_graph.DoubleVector_begin(self)
    def end(self): return _go_graph.DoubleVector_end(self)
    def rbegin(self): return _go_graph.DoubleVector_rbegin(self)
    def rend(self): return _go_graph.DoubleVector_rend(self)
    def pop_back(self): return _go_graph.DoubleVector_pop_back(self)
    def erase(self, *args): return _go_graph.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _go_graph.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _go_graph.DoubleVector_push_back(self, *args)
    def front(self): return _go_graph.DoubleVector_front(self)
    def back(self): return _go_graph.DoubleVector_back(self)
    def assign(self, *args): return _go_graph.DoubleVector_assign(self, *args)
    def resize(self, *args): return _go_graph.DoubleVector_resize(self, *args)
    def insert(self, *args): return _go_graph.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _go_graph.DoubleVector_reserve(self, *args)
    def capacity(self): return _go_graph.DoubleVector_capacity(self)
    __swig_destroy__ = _go_graph.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _go_graph.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class BoostSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoostSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoostSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _go_graph.new_BoostSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _go_graph.delete_BoostSet
    __del__ = lambda self : None;
BoostSet_swigregister = _go_graph.BoostSet_swigregister
BoostSet_swigregister(BoostSet)

NUM_ONTOLOGIES = _go_graph.NUM_ONTOLOGIES
NUM_EVIDENCES = _go_graph.NUM_EVIDENCES
NUM_RELATIONSHIPS = _go_graph.NUM_RELATIONSHIPS

def getRootTermBP():
  return _go_graph.getRootTermBP()
getRootTermBP = _go_graph.getRootTermBP

def getRootTermMF():
  return _go_graph.getRootTermMF()
getRootTermMF = _go_graph.getRootTermMF

def getRootTermCC():
  return _go_graph.getRootTermCC()
getRootTermCC = _go_graph.getRootTermCC
BP = _go_graph.BP
MF = _go_graph.MF
CC = _go_graph.CC
ONTO_ERROR = _go_graph.ONTO_ERROR

def ontologyStringToCode(*args):
  return _go_graph.ontologyStringToCode(*args)
ontologyStringToCode = _go_graph.ontologyStringToCode

def ontologyToString(*args):
  return _go_graph.ontologyToString(*args)
ontologyToString = _go_graph.ontologyToString
EXP = _go_graph.EXP
IDA = _go_graph.IDA
IPI = _go_graph.IPI
IMP = _go_graph.IMP
IGI = _go_graph.IGI
IEP = _go_graph.IEP
ISS = _go_graph.ISS
ISO = _go_graph.ISO
ISA = _go_graph.ISA
ISM = _go_graph.ISM
IGC = _go_graph.IGC
IBA = _go_graph.IBA
IBD = _go_graph.IBD
IKR = _go_graph.IKR
IRD = _go_graph.IRD
RCA = _go_graph.RCA
TAS = _go_graph.TAS
NAS = _go_graph.NAS
IC = _go_graph.IC
ND = _go_graph.ND
IEA = _go_graph.IEA
NR = _go_graph.NR
ECODE_ERROR = _go_graph.ECODE_ERROR

def evidenceStringToCode(*args):
  return _go_graph.evidenceStringToCode(*args)
evidenceStringToCode = _go_graph.evidenceStringToCode

def evidenceToString(*args):
  return _go_graph.evidenceToString(*args)
evidenceToString = _go_graph.evidenceToString
IS_A = _go_graph.IS_A
PART_OF = _go_graph.PART_OF
REGULATES = _go_graph.REGULATES
POSITIVELY_REGULATES = _go_graph.POSITIVELY_REGULATES
NEGATIVELY_REGULATES = _go_graph.NEGATIVELY_REGULATES
REL_ERROR = _go_graph.REL_ERROR

def relationshipStringToCode(*args):
  return _go_graph.relationshipStringToCode(*args)
relationshipStringToCode = _go_graph.relationshipStringToCode

def relationshipToString(*args):
  return _go_graph.relationshipToString(*args)
relationshipToString = _go_graph.relationshipToString
class GoGraph(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GoGraph, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GoGraph, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _go_graph.delete_GoGraph
    __del__ = lambda self : None;
    def insertTerm(self, *args): return _go_graph.GoGraph_insertTerm(self, *args)
    def insertRelationship(self, *args): return _go_graph.GoGraph_insertRelationship(self, *args)
    def getNumVertices(self): return _go_graph.GoGraph_getNumVertices(self)
    def getNumEdges(self): return _go_graph.GoGraph_getNumEdges(self)
    def initMaps(self): return _go_graph.GoGraph_initMaps(self)
    def getGraph(self): return _go_graph.GoGraph_getGraph(self)
    def hasTerm(self, *args): return _go_graph.GoGraph_hasTerm(self, *args)
    def getTermIndex(self, *args): return _go_graph.GoGraph_getTermIndex(self, *args)
    def getTermStringIdByIndex(self, *args): return _go_graph.GoGraph_getTermStringIdByIndex(self, *args)
    def getTermNameByIndex(self, *args): return _go_graph.GoGraph_getTermNameByIndex(self, *args)
    def getTermName(self, *args): return _go_graph.GoGraph_getTermName(self, *args)
    def getTermDescriptionByIndex(self, *args): return _go_graph.GoGraph_getTermDescriptionByIndex(self, *args)
    def getTermDescription(self, *args): return _go_graph.GoGraph_getTermDescription(self, *args)
    def getRoot(self): return _go_graph.GoGraph_getRoot(self)
    def getTermOntology(self, *args): return _go_graph.GoGraph_getTermOntology(self, *args)
    def getTermOntologyByIndex(self, *args): return _go_graph.GoGraph_getTermOntologyByIndex(self, *args)
    def getTermOntologyByVertex(self, *args): return _go_graph.GoGraph_getTermOntologyByVertex(self, *args)
    def getVertexIndex(self, *args): return _go_graph.GoGraph_getVertexIndex(self, *args)
    def getVertexByIndex(self, *args): return _go_graph.GoGraph_getVertexByIndex(self, *args)
    def getVertexByName(self, *args): return _go_graph.GoGraph_getVertexByName(self, *args)
    def getDescendantTerms(self, *args): return _go_graph.GoGraph_getDescendantTerms(self, *args)
    def getAncestorTerms(self, *args): return _go_graph.GoGraph_getAncestorTerms(self, *args)
    def getParentTerms(self, *args): return _go_graph.GoGraph_getParentTerms(self, *args)
    def getChildTerms(self, *args): return _go_graph.GoGraph_getChildTerms(self, *args)
    def getAllTerms(self): return _go_graph.GoGraph_getAllTerms(self)
    def getAllTermsBP(self): return _go_graph.GoGraph_getAllTermsBP(self)
    def getAllTermsMF(self): return _go_graph.GoGraph_getAllTermsMF(self)
    def getAllTermsCC(self): return _go_graph.GoGraph_getAllTermsCC(self)
    def filterSetForOntology(self, *args): return _go_graph.GoGraph_filterSetForOntology(self, *args)
    def filterSetForBP(self, *args): return _go_graph.GoGraph_filterSetForBP(self, *args)
    def filterSetForMF(self, *args): return _go_graph.GoGraph_filterSetForMF(self, *args)
    def filterSetForCC(self, *args): return _go_graph.GoGraph_filterSetForCC(self, *args)
    def getOntologyTerms(self, *args): return _go_graph.GoGraph_getOntologyTerms(self, *args)
    def getInducedSubgraph2(self, *args): return _go_graph.GoGraph_getInducedSubgraph2(self, *args)
    def getInducedSubgraph(self, *args): return _go_graph.GoGraph_getInducedSubgraph(self, *args)
    def getNumComponents(self): return _go_graph.GoGraph_getNumComponents(self)
    def __init__(self): 
        this = _go_graph.new_GoGraph()
        try: self.this.append(this)
        except: self.this = this
GoGraph_swigregister = _go_graph.GoGraph_swigregister
GoGraph_swigregister(GoGraph)
cvar = _go_graph.cvar



