# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_annotation_data', [dirname(__file__)])
        except ImportError:
            import _annotation_data
            return _annotation_data
        if fp is not None:
            try:
                _mod = imp.load_module('_annotation_data', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _annotation_data = swig_import_helper()
    del swig_import_helper
else:
    import _annotation_data
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _annotation_data.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _annotation_data.SwigPyIterator_value(self)
    def incr(self, n = 1): return _annotation_data.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _annotation_data.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _annotation_data.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _annotation_data.SwigPyIterator_equal(self, *args)
    def copy(self): return _annotation_data.SwigPyIterator_copy(self)
    def next(self): return _annotation_data.SwigPyIterator_next(self)
    def __next__(self): return _annotation_data.SwigPyIterator___next__(self)
    def previous(self): return _annotation_data.SwigPyIterator_previous(self)
    def advance(self, *args): return _annotation_data.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _annotation_data.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _annotation_data.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _annotation_data.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _annotation_data.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _annotation_data.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _annotation_data.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _annotation_data.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SizeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SizeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SizeVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _annotation_data.SizeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _annotation_data.SizeVector___nonzero__(self)
    def __bool__(self): return _annotation_data.SizeVector___bool__(self)
    def __len__(self): return _annotation_data.SizeVector___len__(self)
    def pop(self): return _annotation_data.SizeVector_pop(self)
    def __getslice__(self, *args): return _annotation_data.SizeVector___getslice__(self, *args)
    def __setslice__(self, *args): return _annotation_data.SizeVector___setslice__(self, *args)
    def __delslice__(self, *args): return _annotation_data.SizeVector___delslice__(self, *args)
    def __delitem__(self, *args): return _annotation_data.SizeVector___delitem__(self, *args)
    def __getitem__(self, *args): return _annotation_data.SizeVector___getitem__(self, *args)
    def __setitem__(self, *args): return _annotation_data.SizeVector___setitem__(self, *args)
    def append(self, *args): return _annotation_data.SizeVector_append(self, *args)
    def empty(self): return _annotation_data.SizeVector_empty(self)
    def size(self): return _annotation_data.SizeVector_size(self)
    def clear(self): return _annotation_data.SizeVector_clear(self)
    def swap(self, *args): return _annotation_data.SizeVector_swap(self, *args)
    def get_allocator(self): return _annotation_data.SizeVector_get_allocator(self)
    def begin(self): return _annotation_data.SizeVector_begin(self)
    def end(self): return _annotation_data.SizeVector_end(self)
    def rbegin(self): return _annotation_data.SizeVector_rbegin(self)
    def rend(self): return _annotation_data.SizeVector_rend(self)
    def pop_back(self): return _annotation_data.SizeVector_pop_back(self)
    def erase(self, *args): return _annotation_data.SizeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _annotation_data.new_SizeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _annotation_data.SizeVector_push_back(self, *args)
    def front(self): return _annotation_data.SizeVector_front(self)
    def back(self): return _annotation_data.SizeVector_back(self)
    def assign(self, *args): return _annotation_data.SizeVector_assign(self, *args)
    def resize(self, *args): return _annotation_data.SizeVector_resize(self, *args)
    def insert(self, *args): return _annotation_data.SizeVector_insert(self, *args)
    def reserve(self, *args): return _annotation_data.SizeVector_reserve(self, *args)
    def capacity(self): return _annotation_data.SizeVector_capacity(self)
    __swig_destroy__ = _annotation_data.delete_SizeVector
    __del__ = lambda self : None;
SizeVector_swigregister = _annotation_data.SizeVector_swigregister
SizeVector_swigregister(SizeVector)

class StringArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _annotation_data.new_StringArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annotation_data.delete_StringArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _annotation_data.StringArray___getitem__(self, *args)
    def __setitem__(self, *args): return _annotation_data.StringArray___setitem__(self, *args)
    def cast(self): return _annotation_data.StringArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _annotation_data.StringArray_frompointer
    if _newclass:frompointer = staticmethod(_annotation_data.StringArray_frompointer)
StringArray_swigregister = _annotation_data.StringArray_swigregister
StringArray_swigregister(StringArray)

def StringArray_frompointer(*args):
  return _annotation_data.StringArray_frompointer(*args)
StringArray_frompointer = _annotation_data.StringArray_frompointer

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _annotation_data.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _annotation_data.StringVector___nonzero__(self)
    def __bool__(self): return _annotation_data.StringVector___bool__(self)
    def __len__(self): return _annotation_data.StringVector___len__(self)
    def pop(self): return _annotation_data.StringVector_pop(self)
    def __getslice__(self, *args): return _annotation_data.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _annotation_data.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _annotation_data.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _annotation_data.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _annotation_data.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _annotation_data.StringVector___setitem__(self, *args)
    def append(self, *args): return _annotation_data.StringVector_append(self, *args)
    def empty(self): return _annotation_data.StringVector_empty(self)
    def size(self): return _annotation_data.StringVector_size(self)
    def clear(self): return _annotation_data.StringVector_clear(self)
    def swap(self, *args): return _annotation_data.StringVector_swap(self, *args)
    def get_allocator(self): return _annotation_data.StringVector_get_allocator(self)
    def begin(self): return _annotation_data.StringVector_begin(self)
    def end(self): return _annotation_data.StringVector_end(self)
    def rbegin(self): return _annotation_data.StringVector_rbegin(self)
    def rend(self): return _annotation_data.StringVector_rend(self)
    def pop_back(self): return _annotation_data.StringVector_pop_back(self)
    def erase(self, *args): return _annotation_data.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _annotation_data.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _annotation_data.StringVector_push_back(self, *args)
    def front(self): return _annotation_data.StringVector_front(self)
    def back(self): return _annotation_data.StringVector_back(self)
    def assign(self, *args): return _annotation_data.StringVector_assign(self, *args)
    def resize(self, *args): return _annotation_data.StringVector_resize(self, *args)
    def insert(self, *args): return _annotation_data.StringVector_insert(self, *args)
    def reserve(self, *args): return _annotation_data.StringVector_reserve(self, *args)
    def capacity(self): return _annotation_data.StringVector_capacity(self)
    __swig_destroy__ = _annotation_data.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _annotation_data.StringVector_swigregister
StringVector_swigregister(StringVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _annotation_data.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _annotation_data.DoubleVector___nonzero__(self)
    def __bool__(self): return _annotation_data.DoubleVector___bool__(self)
    def __len__(self): return _annotation_data.DoubleVector___len__(self)
    def pop(self): return _annotation_data.DoubleVector_pop(self)
    def __getslice__(self, *args): return _annotation_data.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _annotation_data.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _annotation_data.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _annotation_data.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _annotation_data.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _annotation_data.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _annotation_data.DoubleVector_append(self, *args)
    def empty(self): return _annotation_data.DoubleVector_empty(self)
    def size(self): return _annotation_data.DoubleVector_size(self)
    def clear(self): return _annotation_data.DoubleVector_clear(self)
    def swap(self, *args): return _annotation_data.DoubleVector_swap(self, *args)
    def get_allocator(self): return _annotation_data.DoubleVector_get_allocator(self)
    def begin(self): return _annotation_data.DoubleVector_begin(self)
    def end(self): return _annotation_data.DoubleVector_end(self)
    def rbegin(self): return _annotation_data.DoubleVector_rbegin(self)
    def rend(self): return _annotation_data.DoubleVector_rend(self)
    def pop_back(self): return _annotation_data.DoubleVector_pop_back(self)
    def erase(self, *args): return _annotation_data.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _annotation_data.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _annotation_data.DoubleVector_push_back(self, *args)
    def front(self): return _annotation_data.DoubleVector_front(self)
    def back(self): return _annotation_data.DoubleVector_back(self)
    def assign(self, *args): return _annotation_data.DoubleVector_assign(self, *args)
    def resize(self, *args): return _annotation_data.DoubleVector_resize(self, *args)
    def insert(self, *args): return _annotation_data.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _annotation_data.DoubleVector_reserve(self, *args)
    def capacity(self): return _annotation_data.DoubleVector_capacity(self)
    __swig_destroy__ = _annotation_data.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _annotation_data.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class BoostSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoostSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoostSet, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _annotation_data.new_BoostSet()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annotation_data.delete_BoostSet
    __del__ = lambda self : None;
BoostSet_swigregister = _annotation_data.BoostSet_swigregister
BoostSet_swigregister(BoostSet)

NUM_ONTOLOGIES = _annotation_data.NUM_ONTOLOGIES
NUM_EVIDENCES = _annotation_data.NUM_EVIDENCES
NUM_RELATIONSHIPS = _annotation_data.NUM_RELATIONSHIPS

def getRootTermBP():
  return _annotation_data.getRootTermBP()
getRootTermBP = _annotation_data.getRootTermBP

def getRootTermMF():
  return _annotation_data.getRootTermMF()
getRootTermMF = _annotation_data.getRootTermMF

def getRootTermCC():
  return _annotation_data.getRootTermCC()
getRootTermCC = _annotation_data.getRootTermCC
BP = _annotation_data.BP
MF = _annotation_data.MF
CC = _annotation_data.CC
ONTO_ERROR = _annotation_data.ONTO_ERROR

def ontologyStringToCode(*args):
  return _annotation_data.ontologyStringToCode(*args)
ontologyStringToCode = _annotation_data.ontologyStringToCode

def ontologyToString(*args):
  return _annotation_data.ontologyToString(*args)
ontologyToString = _annotation_data.ontologyToString
EXP = _annotation_data.EXP
IDA = _annotation_data.IDA
IPI = _annotation_data.IPI
IMP = _annotation_data.IMP
IGI = _annotation_data.IGI
IEP = _annotation_data.IEP
ISS = _annotation_data.ISS
ISO = _annotation_data.ISO
ISA = _annotation_data.ISA
ISM = _annotation_data.ISM
IGC = _annotation_data.IGC
IBA = _annotation_data.IBA
IBD = _annotation_data.IBD
IKR = _annotation_data.IKR
IRD = _annotation_data.IRD
RCA = _annotation_data.RCA
TAS = _annotation_data.TAS
NAS = _annotation_data.NAS
IC = _annotation_data.IC
ND = _annotation_data.ND
IEA = _annotation_data.IEA
NR = _annotation_data.NR
ECODE_ERROR = _annotation_data.ECODE_ERROR

def evidenceStringToCode(*args):
  return _annotation_data.evidenceStringToCode(*args)
evidenceStringToCode = _annotation_data.evidenceStringToCode

def evidenceToString(*args):
  return _annotation_data.evidenceToString(*args)
evidenceToString = _annotation_data.evidenceToString
IS_A = _annotation_data.IS_A
PART_OF = _annotation_data.PART_OF
REGULATES = _annotation_data.REGULATES
POSITIVELY_REGULATES = _annotation_data.POSITIVELY_REGULATES
NEGATIVELY_REGULATES = _annotation_data.NEGATIVELY_REGULATES
REL_ERROR = _annotation_data.REL_ERROR

def relationshipStringToCode(*args):
  return _annotation_data.relationshipStringToCode(*args)
relationshipStringToCode = _annotation_data.relationshipStringToCode

def relationshipToString(*args):
  return _annotation_data.relationshipToString(*args)
relationshipToString = _annotation_data.relationshipToString
class AnnotationData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AnnotationData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AnnotationData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_genes"] = _annotation_data.AnnotationData__genes_set
    __swig_getmethods__["_genes"] = _annotation_data.AnnotationData__genes_get
    if _newclass:_genes = _swig_property(_annotation_data.AnnotationData__genes_get, _annotation_data.AnnotationData__genes_set)
    __swig_setmethods__["_goTerms"] = _annotation_data.AnnotationData__goTerms_set
    __swig_getmethods__["_goTerms"] = _annotation_data.AnnotationData__goTerms_get
    if _newclass:_goTerms = _swig_property(_annotation_data.AnnotationData__goTerms_get, _annotation_data.AnnotationData__goTerms_set)
    __swig_setmethods__["_stringToGene"] = _annotation_data.AnnotationData__stringToGene_set
    __swig_getmethods__["_stringToGene"] = _annotation_data.AnnotationData__stringToGene_get
    if _newclass:_stringToGene = _swig_property(_annotation_data.AnnotationData__stringToGene_get, _annotation_data.AnnotationData__stringToGene_set)
    __swig_setmethods__["_stringToGo"] = _annotation_data.AnnotationData__stringToGo_set
    __swig_getmethods__["_stringToGo"] = _annotation_data.AnnotationData__stringToGo_get
    if _newclass:_stringToGo = _swig_property(_annotation_data.AnnotationData__stringToGo_get, _annotation_data.AnnotationData__stringToGo_set)
    __swig_setmethods__["_goToGenes"] = _annotation_data.AnnotationData__goToGenes_set
    __swig_getmethods__["_goToGenes"] = _annotation_data.AnnotationData__goToGenes_get
    if _newclass:_goToGenes = _swig_property(_annotation_data.AnnotationData__goToGenes_get, _annotation_data.AnnotationData__goToGenes_set)
    __swig_setmethods__["_goToGenesEvidence"] = _annotation_data.AnnotationData__goToGenesEvidence_set
    __swig_getmethods__["_goToGenesEvidence"] = _annotation_data.AnnotationData__goToGenesEvidence_get
    if _newclass:_goToGenesEvidence = _swig_property(_annotation_data.AnnotationData__goToGenesEvidence_get, _annotation_data.AnnotationData__goToGenesEvidence_set)
    __swig_setmethods__["_geneToGos"] = _annotation_data.AnnotationData__geneToGos_set
    __swig_getmethods__["_geneToGos"] = _annotation_data.AnnotationData__geneToGos_get
    if _newclass:_geneToGos = _swig_property(_annotation_data.AnnotationData__geneToGos_get, _annotation_data.AnnotationData__geneToGos_set)
    __swig_setmethods__["_geneToGosEvidence"] = _annotation_data.AnnotationData__geneToGosEvidence_set
    __swig_getmethods__["_geneToGosEvidence"] = _annotation_data.AnnotationData__geneToGosEvidence_get
    if _newclass:_geneToGosEvidence = _swig_property(_annotation_data.AnnotationData__geneToGosEvidence_get, _annotation_data.AnnotationData__geneToGosEvidence_set)
    def __init__(self): 
        this = _annotation_data.new_AnnotationData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _annotation_data.delete_AnnotationData
    __del__ = lambda self : None;
    def addAssociation(self, *args): return _annotation_data.AnnotationData_addAssociation(self, *args)
    def hasGoTerm(self, *args): return _annotation_data.AnnotationData_hasGoTerm(self, *args)
    def hasGene(self, *args): return _annotation_data.AnnotationData_hasGene(self, *args)
    def getAllGoTerms(self): return _annotation_data.AnnotationData_getAllGoTerms(self)
    def getAllGenes(self): return _annotation_data.AnnotationData_getAllGenes(self)
    def getGoTermsForGene(self, *args): return _annotation_data.AnnotationData_getGoTermsForGene(self, *args)
    def getGoTermsForGeneByOntology(self, *args): return _annotation_data.AnnotationData_getGoTermsForGeneByOntology(self, *args)
    def getGoTermsForGeneBP(self, *args): return _annotation_data.AnnotationData_getGoTermsForGeneBP(self, *args)
    def getGoTermsForGeneMF(self, *args): return _annotation_data.AnnotationData_getGoTermsForGeneMF(self, *args)
    def getGoTermsForGeneCC(self, *args): return _annotation_data.AnnotationData_getGoTermsForGeneCC(self, *args)
    def getGoTermsEvidenceForGene(self, *args): return _annotation_data.AnnotationData_getGoTermsEvidenceForGene(self, *args)
    def getGenesForGoTerm(self, *args): return _annotation_data.AnnotationData_getGenesForGoTerm(self, *args)
    def addGenesForGoTerm(self, *args): return _annotation_data.AnnotationData_addGenesForGoTerm(self, *args)
    def getGenesEvidenceForGoTerm(self, *args): return _annotation_data.AnnotationData_getGenesEvidenceForGoTerm(self, *args)
    def getNumAnnotationsForGoTerm(self, *args): return _annotation_data.AnnotationData_getNumAnnotationsForGoTerm(self, *args)
    def getNumAnnotationsForGene(self, *args): return _annotation_data.AnnotationData_getNumAnnotationsForGene(self, *args)
    def getNumGenes(self): return _annotation_data.AnnotationData_getNumGenes(self)
    def getNumGoTerms(self): return _annotation_data.AnnotationData_getNumGoTerms(self)
    def getOntologyTerms(self, *args): return _annotation_data.AnnotationData_getOntologyTerms(self, *args)
AnnotationData_swigregister = _annotation_data.AnnotationData_swigregister
AnnotationData_swigregister(AnnotationData)
cvar = _annotation_data.cvar



